# to run 
# scrapy crawl hoops_spider -o nba2.csv
#imported our necessary tools
import scrapy
from scrapy.http.request import Request
import string
#inputing the website we are going to scrape
USER_AGENT='hoops-cool-project (https://www.basketball-reference.com/players/a/abdelal01.html)'

#creating our spider 
class HoopsSpider(scrapy.Spider):
    name = 'hoops_spider'
    
    #we will start on the homepage of the basketball-reference website
    start_urls = ["https://www.basketball-reference.com"]
    
    def parse(self, response):
        '''
        Hardcode from initial homepage to players page.
        Call parse_players function on players page.
        
        No output. 
        '''
        players_url = response.url + "/players/" # use to navigate to players page
        yield scrapy.Request(players_url, callback = self.parse_players) # callback next function
        
    def parse_players(self,response):
        '''
        Begin at players page, collect links to pages showing lists of all nba players by letter of last name
        For each group of players, call next function.
        
        No output.
        '''
        # create list of players links
        players_list = ['https://www.basketball-reference.com/' + a.attrib['href'] 
                      for a in response.css('ul.alphabet a')] 
        prefix = "https://www.basketball-reference.com/players/"
        suffix = list(string.ascii_lowercase) 
        for a in suffix:
            alph_url = prefix + a + "/"
            yield scrapy.Request(alph_url, callback = self.parse_player_by_alph) # callback next function for each player list    
    def parse_player_by_alph(self,response):
        """
        Begin at player page by alphabet, collects links to players pages
        Will call next function to scrape player page
        """
        #initialize prefix as the starting website
        prefix = "https://www.basketball-reference.com"
        #extracting all the player pages
        player_suffix = response.css("th.left a::attr(href)").getall()
        #requests the player page and once the page is fetched, calls the parse_player_stats function
        for suffix in player_suffix:
            player_url = prefix + suffix
            yield scrapy.Request(player_url, callback = self.parse_player_stats)      
            
    def parse_player_stats(self,response):
        '''
        This function is called when the player page is fetched. It fetches
        an extensive amount of data including the # of years a player played, 
        # of games, # of points, etc. 
        '''
        for i in range(0,22):
            #breaks if the text is empty
            if response.css(f"tr.full_table th.left:nth-of-type({i}) a::text").get() == "":
                break
            else:
                #returns a dictionary with the extracted data
                yield{
                "Season":response.css(f"tr.full_table th.left:nth-of-type({i}) a::text").get(), #years
                "Tms":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.left[data-stat=team_id] a::text").get(), #teams
                "Pos":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.center[data-stat=pos]::text").get(), #position
                "G":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=g]::text").get(), #games 
                "GS":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=gs]::text").get(), #games started
                "MP":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=mp_per_g]::text").get(), #minutes played
                "FG":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fg_per_g]::text").get(), #field goals made
                "FGA":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fga_per_g]::text").get(), #field goals attempted
                "FG%":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fg_pct]::text").get(), #field goal percentage
                "3P":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fg3_per_g]::text").get(), #three pointers made
                "3PA":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fg3a_per_g]::text").get(), #three pointers attempted
                "3P%":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fg3_pct]::text").get(), #three pointer percentage
                "2P":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fg2_per_g]::text").get(), #two pointers made
                "2PA":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fg2a_per_g]::text").get(), #two pointers attempted
                "2P%":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fg2_pct]::text").get(), #two pointer percentage
                "eFG%":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=efg_pct]::text").get(), #effective field goal percentage
                "FT":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=ft_per_g]::text").get(), #free throws made
                "FTA":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=fta_per_g]::text").get(), #free throws attempted
                "FT%":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=ft_pct]::text").get(), #free throws percentage
                "ORB":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=orb_per_g]::text").get(), #offensive rebound
                "DRB":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=drb_per_g]::text").get(), #defensive rebound
                "TRB":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=trb_per_g]::text").get(), #total amt of rebounds
                "AST":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=ast_per_g]::text").get(), #assists
                "STL":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=stl_per_g]::text").get(), #steals
                "BLK":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=blk_per_g]::text").get(), #blocks
                "TOV":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=tov_per_g]::text").get(), #turnover percentage
                "PF":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=pf_per_g]::text").get(), #personal foul
                "PTS":response.css(f"#per_game tbody tr.full_table:nth-of-type({i}) td.right[data-stat=pts_per_g]::text").get() #points
                }
