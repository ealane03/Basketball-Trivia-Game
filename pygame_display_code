# imports 
import pygame as pg
import time
    
pg.init() # initialize game
screen = pg.display.set_mode((1400, 800)) # render screen
COLOR_INACTIVE = pg.Color('lightskyblue3') # set color for inactive status
COLOR_ACTIVE = pg.Color('dodgerblue2') # set color for active status
FONT = pg.font.Font(None, 20) # question font size
FONT_SMALL = pg.font.Font(None, 28) # small font size
FONT_LARGE = pg.font.Font(None, 50) # large font size

bg = pg.image.load("background.jpg")

class InputBox:
    '''
    Creates each text box for question answer.
    Handles user text input case by case.
    '''
    def __init__(self, x, y, w, h, text='', correct = False):
        self.rect = pg.Rect(x, y, w, h) # coodinates for box appearing on screen
        self.color = COLOR_INACTIVE # set color
        self.text = text # set text 
        self.txt_surface = FONT_SMALL.render(text, True, self.color) # set text surface
        self.active = False # default status is not active
        self.correct = correct # set correct flag

    def handle_event(self, event):
        '''
        Response if user clicks on box and enters text
        '''
        if event.type == pg.MOUSEBUTTONDOWN:
            # if the user clicked on the input_box rect.
            if self.rect.collidepoint(event.pos):
                # toggle active variable depending on correct flag
                if self.correct == False:
                    self.text = ""
                    self.active = True
                if self.correct == True:
                    self.active = False
            else:
                self.active = False
            # change current color of the input box.
            self.color = COLOR_ACTIVE if self.active else COLOR_INACTIVE
            
        if event.type == pg.KEYDOWN:
            # if the user presses a key
            if self.active:
                if event.key == pg.K_RETURN: # user presses enter
                    if self.rect == pg.Rect(350, 150, 200, 185): # updates specific box
                        if np.any(b1 == self.text): # checks user's answer against list of query's correct answers
                            self.text = self.text + " is correct!" 
                            self.correct = True
                            self.active = False
                        else:
                            self.text = "Incorrect"
                            self.active = False
                            self.correct = True
                    if self.rect == pg.Rect(350, 350, 200, 185):
                        if np.any(b4 == self.text):
                            self.text = self.text + " is correct!"
                            self.correct = True    
                            self.active = False                            
                        else:
                            self.text = "Incorrect"
                            self.active = False
                            self.correct = True
                    if self.rect == pg.Rect(350, 550, 200, 185):
                        if np.any(b7 == self.text):
                            self.text = self.text + " is correct!"
                            self.correct = True     
                            self.active = False                            
                        else:
                            self.text = "Incorrect"    
                            self.active = False                                         
                            self.correct = True

                    if self.rect == pg.Rect(600, 150, 200, 185):
                        if np.any(b2 == self.text):
                            self.text = self.text + " is correct!"
                            self.correct = True   
                            self.active = False                            
                        else:
                            self.text = "Incorrect"
                            self.active = False
                            self.correct = True                            
                    if self.rect == pg.Rect(600, 350, 200, 185):
                        if np.any(b5 == self.text):
                            self.text = self.text + " is correct!"
                            self.correct = True
                            self.active = False                
                        else:
                            self.text = "Incorrect"
                            self.active = False 
                            self.correct = True                            
                    if self.rect == pg.Rect(600, 550, 200, 185):
                        if np.any(b8 == self.text):
                            self.text = self.text + " is correct!"
                            self.correct = True                            
                            self.active = False                            
                        else:
                            self.text = "Incorrect"    
                            self.active = False                         
                            self.correct = True                            
                    if self.rect == pg.Rect(850, 150, 200, 185):
                        if np.any(b3 == self.text):
                            self.text = self.text + " is correct!"
                            self.correct = True                   
                            self.active = False                        
                        else:
                            self.text = "Incorrect"                   
                            self.active = False                                                     
                            self.correct = True                            
                    if self.rect == pg.Rect(850, 350, 200, 185):
                        if np.any(b6 == self.text):
                            self.text = self.text + " is correct!"
                            self.correct = True                            
                            self.active = False                                                    
                        else:
                            self.text = "Incorrect"
                            self.active = False
                            self.correct = True                            
                    if self.rect == pg.Rect(850, 550, 200, 185):
                        if np.any(b9 == self.text):
                            self.text = self.text + " is correct!"
                            self.correct = True                            
                            self.active = False                            
                        else:
                            self.text = "Incorrect"
                            self.active = False   
                            self.correct = True                        
                                        
                elif event.key == pg.K_BACKSPACE: # user presses backspace
                    self.text = self.text[:-1]
                else:
                    self.text += event.unicode # user presses text keys
                    
                # Re-render the text.
                self.txt_surface = FONT_SMALL.render(self.text, True, self.color)
                
    def update(self):
        # resize box if the text is too long
        width = max(200, self.txt_surface.get_width()+10)
        self.rect.w = width

    def draw(self, screen):
        # blit the text
        screen.blit(self.txt_surface, (self.rect.x+5, self.rect.y+5))
        # blit the rect
        pg.draw.rect(screen, self.color, self.rect, 2)


class question:
    '''
    Class for each question with text and coordinates
    '''
    def __init__(self, x, y, text):
        self.color = COLOR_INACTIVE
        self.text = text
        self.x = x
        self.y = y
        
    def label(self, screen):
        # render text
        q = FONT.render(self.text, False, (255,255,255))
        screen.blit(q, (self.x, self.y))

class title:   
    '''
    Class for title with text and coordinates
    '''
    def __init__(self, x, y, text):
        self.color = COLOR_INACTIVE
        self.text = text
        self.x = x
        self.y = y
        
    def label(self, screen):
        # render text
        q = FONT_LARGE.render(self.text, False, (255,255,255))
        screen.blit(q, (self.x, self.y))    
        
def main():
    '''
    Runs game
    '''
    clock = pg.time.Clock()
    
    # create answer boxes, 3x3 grid
    input_box1 = InputBox(350, 150, 185, 185)
    input_box4 = InputBox(600, 150, 185, 185)
    input_box7 = InputBox(850, 150, 185, 185)

    input_box2 = InputBox(350, 350, 185, 185)
    input_box5 = InputBox(600, 350, 185, 185)
    input_box8 = InputBox(850, 350, 185, 185)

    input_box3 = InputBox(350, 550, 185, 185)
    input_box6 = InputBox(600, 550, 185, 185)
    input_box9 = InputBox(850, 550, 185, 185)
    
    input_boxes = [input_box1, input_box2, input_box3,
                   input_box4, input_box5, input_box6,
                   input_box7, input_box8, input_box9]
    
    # run query
    create_game()
    
    # create 6 questions
    Q1 = question(350, 100, team2_q)
    Q2 = question(600, 100, q3)
    Q3 = question(850, 100, q4)
    Q4 = question(150, 150, team1_q)
    Q5 = question(150, 350, q1)
    Q6 = question(150, 550, q2)
    
    questions = [Q1, Q2, Q3, Q4, Q5, Q6]
    
    done = False
    finished = False    
    
    # loop game until all all questions have been answered 
    while not done:
        for event in pg.event.get():
                        
            if event.type == pg.QUIT:
                done = True
                
            if event.type == pg.KEYDOWN:
                if event.key == pg.K_r and finished:
                    main()
                
            for box in input_boxes:
                box.handle_event(event)

            for box in input_boxes:
                box.update()

            screen.fill((30, 30, 30))
            screen.blit(bg, (0, 0))

            for box in input_boxes:
                box.draw(screen)
            
            for q in questions:
                q.label(screen)
            
            t = title(595, 40, "Hoops Trivia")
            t.label(screen)
                                
            if input_box1.correct & input_box2.correct & input_box3.correct & input_box4.correct & input_box5.correct & input_box6.correct & input_box7.correct & input_box8.correct & input_box9.correct:
                finished = True
        
            if finished:  
                # restart option
                gameover = FONT.render("Press R to Restart", False, (255, 255, 255))
                rect = gameover.get_rect()
                rect.center = screen.get_rect().center
                screen.blit(gameover, rect)

            pg.display.flip()
            clock.tick(30)

if __name__ == '__main__':
    main()
    pg.quit()
